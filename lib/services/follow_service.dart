// lib/services/follow_service.dart
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../models/follow_model.dart';
import 'api_config.dart';

class FollowService {
  static const String _tokenKey = 'auth_token';
  static const String _userKey = 'user';

  // üîß M√âTHODES UTILITAIRES PRIV√âES

  /// R√©cup√®re le token d'authentification
  Future<String?> _getAuthToken() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getString(_tokenKey);
    } catch (e) {
      print('‚ùå [FOLLOW_SERVICE] Erreur r√©cup√©ration token: $e');
      return null;
    }
  }

  /// R√©cup√®re les headers d'authentification
  Future<Map<String, String>> _getAuthHeaders() async {
    final token = await _getAuthToken();
    return {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      if (token != null) 'Authorization': 'Bearer $token',
    };
  }

  /// G√®re les erreurs API
  void _handleApiError(dynamic error, String defaultMessage) {
    if (error is Map<String, dynamic>) {
      final message = error['message'] ?? defaultMessage;
      final code = error['code'];
      throw FollowException(message, code: code);
    }
    throw FollowException(defaultMessage);
  }

  /// V√©rifie si l'utilisateur est connect√©
  Future<bool> _isAuthenticated() async {
    final token = await _getAuthToken();
    return token != null && token.isNotEmpty;
  }

  // üî• M√âTHODES PRINCIPALES

  /// Suivre ou ne plus suivre un utilisateur (toggle)
  Future<FollowResponse> toggleFollow(int userId) async {
    try {
      print('üîÑ [FOLLOW_SERVICE] Basculement du suivi pour l\'utilisateur ID $userId');
      
      // V√©rifier l'authentification
      if (!await _isAuthenticated()) {
        throw FollowException(
          'Vous devez √™tre connect√© pour suivre ou ne plus suivre un utilisateur',
          code: 'NOT_AUTHENTICATED',
        );
      }
      
      // Pr√©parer la requ√™te
      final url = Uri.parse('${ApiConfig.baseUrl}/api/users/$userId/toggle-follow');
      final headers = await _getAuthHeaders();
      
      print('üåê [FOLLOW_SERVICE] URL: $url');
      
      // Effectuer la requ√™te
      final response = await http.post(url, headers: headers);
      
      print('üì° [FOLLOW_SERVICE] Code de r√©ponse: ${response.statusCode}');
      
      if (response.statusCode == 200 || response.statusCode == 201) {
        final data = json.decode(response.body);
        final followResponse = FollowResponse.fromJson(data);
        
        print('‚úÖ [FOLLOW_SERVICE] Suivi bascul√© avec succ√®s: ${followResponse.action}');
        return followResponse;
      } else {
        final errorData = json.decode(response.body);
        print('‚ùå [FOLLOW_SERVICE] Erreur API: $errorData');
        _handleApiError(errorData, 'Erreur lors du basculement du suivi');
        throw FollowException('Erreur inattendue');
      }
    } catch (e) {
      print('‚ùå [FOLLOW_SERVICE] Exception: $e');
      if (e is FollowException) {
        rethrow;
      }
      throw FollowException('Erreur de connexion: ${e.toString()}');
    }
  }

  /// R√©cup√®re la liste des abonn√©s d'un utilisateur
  Future<FollowersResponse> getUserFollowers(
    int userId, {
    int page = 1,
    int limit = 20,
  }) async {
    try {
      print('üîÑ [FOLLOW_SERVICE] R√©cup√©ration des abonn√©s de l\'utilisateur ID $userId');
      
      // Pr√©parer la requ√™te
      final url = Uri.parse(
        '${ApiConfig.baseUrl}/api/users/$userId/followers?page=$page&limit=$limit',
      );
      final headers = await _getAuthHeaders();
      
      print('üåê [FOLLOW_SERVICE] URL: $url');
      
      // Effectuer la requ√™te
      final response = await http.get(url, headers: headers);
      
      print('üì° [FOLLOW_SERVICE] Code de r√©ponse: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final followersResponse = FollowersResponse.fromJson(data);
        
        print('‚úÖ [FOLLOW_SERVICE] Abonn√©s r√©cup√©r√©s avec succ√®s: ${followersResponse.followers.length}');
        return followersResponse;
      } else {
        final errorData = json.decode(response.body);
        print('‚ùå [FOLLOW_SERVICE] Erreur API: $errorData');
        _handleApiError(errorData, 'Erreur lors de la r√©cup√©ration des abonn√©s');
        throw FollowException('Erreur inattendue');
      }
    } catch (e) {
      print('‚ùå [FOLLOW_SERVICE] Exception: $e');
      if (e is FollowException) {
        rethrow;
      }
      throw FollowException('Erreur de connexion: ${e.toString()}');
    }
  }

  /// R√©cup√®re la liste des abonnements d'un utilisateur
  Future<FollowingResponse> getUserFollowing(
    int userId, {
    int page = 1,
    int limit = 20,
  }) async {
    try {
      print('üîÑ [FOLLOW_SERVICE] R√©cup√©ration des abonnements de l\'utilisateur ID $userId');
      
      // Pr√©parer la requ√™te
      final url = Uri.parse(
        '${ApiConfig.baseUrl}/api/users/$userId/following?page=$page&limit=$limit',
      );
      final headers = await _getAuthHeaders();
      
      print('üåê [FOLLOW_SERVICE] URL: $url');
      
      // Effectuer la requ√™te
      final response = await http.get(url, headers: headers);
      
      print('üì° [FOLLOW_SERVICE] Code de r√©ponse: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final followingResponse = FollowingResponse.fromJson(data);
        
        print('‚úÖ [FOLLOW_SERVICE] Abonnements r√©cup√©r√©s avec succ√®s: ${followingResponse.following.length}');
        return followingResponse;
      } else {
        final errorData = json.decode(response.body);
        print('‚ùå [FOLLOW_SERVICE] Erreur API: $errorData');
        _handleApiError(errorData, 'Erreur lors de la r√©cup√©ration des abonnements');
        throw FollowException('Erreur inattendue');
      }
    } catch (e) {
      print('‚ùå [FOLLOW_SERVICE] Exception: $e');
      if (e is FollowException) {
        rethrow;
      }
      throw FollowException('Erreur de connexion: ${e.toString()}');
    }
  }

  /// V√©rifie si l'utilisateur connect√© suit un autre utilisateur
  Future<IsFollowingResponse> checkIfFollowing(int userId) async {
    try {
      print('üîÑ [FOLLOW_SERVICE] V√©rification si l\'utilisateur suit l\'ID $userId');
      
      // V√©rifier l'authentification
      if (!await _isAuthenticated()) {
        throw FollowException(
          'Vous devez √™tre connect√© pour v√©rifier si vous suivez un utilisateur',
          code: 'NOT_AUTHENTICATED',
        );
      }
      
      // Pr√©parer la requ√™te
      final url = Uri.parse('${ApiConfig.baseUrl}/api/users/$userId/isFollowing');
      final headers = await _getAuthHeaders();
      
      print('üåê [FOLLOW_SERVICE] URL: $url');
      
      // Effectuer la requ√™te
      final response = await http.get(url, headers: headers);
      
      print('üì° [FOLLOW_SERVICE] Code de r√©ponse: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final isFollowingResponse = IsFollowingResponse.fromJson(data);
        
        print('‚úÖ [FOLLOW_SERVICE] V√©rification de suivi r√©ussie: ${isFollowingResponse.isFollowing ? 'Suit' : 'Ne suit pas'}');
        return isFollowingResponse;
      } else {
        final errorData = json.decode(response.body);
        print('‚ùå [FOLLOW_SERVICE] Erreur API: $errorData');
        _handleApiError(errorData, 'Erreur lors de la v√©rification du suivi');
        throw FollowException('Erreur inattendue');
      }
    } catch (e) {
      print('‚ùå [FOLLOW_SERVICE] Exception: $e');
      if (e is FollowException) {
        rethrow;
      }
      throw FollowException('Erreur de connexion: ${e.toString()}');
    }
  }

  /// R√©cup√®re des suggestions d'utilisateurs √† suivre
  Future<SuggestedUsersResponse> getSuggestedUsers({int limit = 10}) async {
    try {
      print('üîÑ [FOLLOW_SERVICE] R√©cup√©ration de $limit suggestions d\'utilisateurs √† suivre');
      
      // V√©rifier l'authentification
      if (!await _isAuthenticated()) {
        throw FollowException(
          'Vous devez √™tre connect√© pour obtenir des suggestions d\'utilisateurs',
          code: 'NOT_AUTHENTICATED',
        );
      }
      
      // Pr√©parer la requ√™te
      final url = Uri.parse('${ApiConfig.baseUrl}/api/users/suggestions?limit=$limit');
      final headers = await _getAuthHeaders();
      
      print('üåê [FOLLOW_SERVICE] URL: $url');
      
      // Effectuer la requ√™te
      final response = await http.get(url, headers: headers);
      
      print('üì° [FOLLOW_SERVICE] Code de r√©ponse: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final suggestedUsersResponse = SuggestedUsersResponse.fromJson(data);
        
        print('‚úÖ [FOLLOW_SERVICE] Suggestions r√©cup√©r√©es avec succ√®s: ${suggestedUsersResponse.suggestions.length}');
        return suggestedUsersResponse;
      } else {
        final errorData = json.decode(response.body);
        print('‚ùå [FOLLOW_SERVICE] Erreur API: $errorData');
        _handleApiError(errorData, 'Erreur lors de la r√©cup√©ration des suggestions');
        throw FollowException('Erreur inattendue');
      }
    } catch (e) {
      print('‚ùå [FOLLOW_SERVICE] Exception: $e');
      if (e is FollowException) {
        rethrow;
      }
      throw FollowException('Erreur de connexion: ${e.toString()}');
    }
  }

  // üîß M√âTHODES UTILITAIRES

  /// Utilitaire pour v√©rifier et afficher les statistiques de suivi pour un utilisateur
  Future<void> debugFollowStats(int userId) async {
    try {
      print('üîç [FOLLOW_SERVICE] D√©bogage des statistiques de suivi pour l\'utilisateur ID $userId');
      
      // R√©cup√©rer le nombre d'abonn√©s
      final followersResponse = await getUserFollowers(userId, page: 1, limit: 1);
      print('üë• [FOLLOW_SERVICE] Nombre total d\'abonn√©s: ${followersResponse.pagination.total}');
      
      // R√©cup√©rer le nombre d'abonnements
      final followingResponse = await getUserFollowing(userId, page: 1, limit: 1);
      print('üë• [FOLLOW_SERVICE] Nombre total d\'abonnements: ${followingResponse.pagination.total}');
      
      // V√©rifier si l'utilisateur est connect√©
      if (await _isAuthenticated()) {
        // Obtenir les informations de l'utilisateur connect√©
        final prefs = await SharedPreferences.getInstance();
        final userStr = prefs.getString(_userKey);
        
        if (userStr != null) {
          final user = json.decode(userStr);
          final currentUserId = user['id'];
          
          // Si l'utilisateur connect√© est diff√©rent de l'utilisateur demand√©, v√©rifier s'il le suit
          if (currentUserId != userId) {
            final isFollowingResponse = await checkIfFollowing(userId);
            print('üë• [FOLLOW_SERVICE] L\'utilisateur connect√© ${isFollowingResponse.isFollowing ? 'suit' : 'ne suit pas'} cet utilisateur');
          }
        }
      }
    } catch (e) {
      print('‚ùå [FOLLOW_SERVICE] Erreur lors du d√©bogage: $e');
    }
  }

  /// Obtient l'utilisateur connect√©
  Future<User?> getCurrentUser() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final userStr = prefs.getString(_userKey);
      
      if (userStr != null) {
        final userData = json.decode(userStr);
        return User.fromJson(userData);
      }
      return null;
    } catch (e) {
      print('‚ùå [FOLLOW_SERVICE] Erreur r√©cup√©ration utilisateur connect√©: $e');
      return null;
    }
  }

  /// Nettoie le cache des donn√©es de suivi
  Future<void> clearFollowCache() async {
    try {
      // Ici vous pourriez impl√©menter un syst√®me de cache si n√©cessaire
      print('üßπ [FOLLOW_SERVICE] Cache des donn√©es de suivi nettoy√©');
    } catch (e) {
      print('‚ùå [FOLLOW_SERVICE] Erreur nettoyage cache: $e');
    }
  }
}