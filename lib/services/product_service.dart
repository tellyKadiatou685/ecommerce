// lib/services/product_service.dart
import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import '../models/product_model.dart';
import 'api_config.dart';
import 'package:mime/mime.dart'; // Pour lookupMimeType
import 'package:http_parser/http_parser.dart';

class ApiResponse {
  final bool success;
  final String message;
  final Map<String, dynamic>? data;

  ApiResponse({
    required this.success,
    required this.message,
    this.data,
  });

  factory ApiResponse.fromJson(Map<String, dynamic> json) {
    return ApiResponse(
      success: json['success'] as bool? ?? json['status'] == 'success',
      message: json['message'] as String? ?? 'Op√©ration r√©ussie',
      data: json['data'] as Map<String, dynamic>?,
    );
  }
}
class ProductService {
  static final ProductService _instance = ProductService._internal();
  factory ProductService() => _instance;
  ProductService._internal();

  // ========== M√âTHODES PUBLIQUES (pour tous les utilisateurs) ==========

  // R√©cup√©rer tous les produits avec pagination et filtres
   Future<ApiResponse> updateProductWithImages({
    required int productId,
    required String name,
    required String description,
    required String category,
    required double price,
    required int stock,
    List<File>? newImageFiles,
    List<String>? existingImageUrls,
    List<String>? imagesToDelete,
    String? videoUrl,
    File? videoFile,
    required String token,
  }) async {
    try {
      print('üõçÔ∏è === UPDATE PRODUCT WITH IMAGES ===');
      print('üìã Param√®tres:');
      print('  ‚Ä¢ ID: $productId');
      print('  ‚Ä¢ Nouvelles images: ${newImageFiles?.length ?? 0}');
      print('  ‚Ä¢ Images √† conserver: ${existingImageUrls?.length ?? 0}');
      print('  ‚Ä¢ Images √† supprimer: ${imagesToDelete?.length ?? 0}');

      // ‚úÖ URL avec /api/products pour cette nouvelle m√©thode sp√©cifique
      final uri = Uri.parse('${ApiConfig.baseUrl}/api/products/$productId/update-with-images');
      final request = http.MultipartRequest('PUT', uri);
      
      // Headers
      request.headers.addAll({
        'Authorization': 'Bearer $token',
        'Accept': 'application/json',
      });
      
      // Champs de donn√©es
      request.fields.addAll({
        'name': name,
        'description': description,
        'category': category,
        'price': price.toString(),
        'stock': stock.toString(),
      });
      
      // Ajouter les listes d'images
      if (existingImageUrls != null && existingImageUrls.isNotEmpty) {
        request.fields['existingImageUrls'] = jsonEncode(existingImageUrls);
        print('üì∏ Images √† conserver: ${existingImageUrls.length}');
      }
      
      if (imagesToDelete != null && imagesToDelete.isNotEmpty) {
        request.fields['imagesToDelete'] = jsonEncode(imagesToDelete);
        print('üóëÔ∏è Images √† supprimer: ${imagesToDelete.length}');
      }
      
      if (videoUrl != null && videoUrl.isNotEmpty) {
        request.fields['videoUrl'] = videoUrl;
      }
      
      // Ajouter les nouvelles images
      if (newImageFiles != null && newImageFiles.isNotEmpty) {
        for (int i = 0; i < newImageFiles.length; i++) {
          final file = newImageFiles[i];
          final mimeType = lookupMimeType(file.path) ?? 'image/jpeg';
          
          request.files.add(
            await http.MultipartFile.fromPath(
              'productImages',
              file.path,
              contentType: MediaType.parse(mimeType),
            ),
          );
        }
        print('üì§ ${newImageFiles.length} nouvelles images ajout√©es √† la requ√™te');
      }
      
      // Ajouter la vid√©o si pr√©sente
      if (videoFile != null) {
        final mimeType = lookupMimeType(videoFile.path) ?? 'video/mp4';
        request.files.add(
          await http.MultipartFile.fromPath(
            'video',
            videoFile.path,
            contentType: MediaType.parse(mimeType),
          ),
        );
      }
      
      print('üì§ Envoi de la requ√™te de mise √† jour...');
      final streamedResponse = await request.send().timeout(
        Duration(seconds: 45),
        onTimeout: () => throw TimeoutException('Timeout lors de la mise √† jour', Duration(seconds: 45)),
      );
      
      final response = await http.Response.fromStream(streamedResponse);
      print('üì• R√©ponse re√ßue: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Produit mis √† jour avec succ√®s');
        print('üìä Statistiques: ${data['stats']}');
        
        if (data['warnings'] != null) {
          print('‚ö†Ô∏è Avertissements: ${data['warnings']['message']}');
        }
        
        return ApiResponse(
          success: true,
          message: data['message'] ?? 'Produit mis √† jour avec succ√®s',
          data: data,
        );
      } else {
        final errorData = jsonDecode(response.body);
        print('‚ùå Erreur ${response.statusCode}: ${errorData['message']}');
        
        throw ApiError(
          status: 'error',
          code: errorData['code'] ?? 'UPDATE_ERROR',
          message: errorData['message'] ?? 'Erreur lors de la mise √† jour',
        );
      }
      
    } catch (e) {
      print('‚ùå Erreur updateProductWithImages: $e');
      
      if (e is TimeoutException) {
        throw ApiError(status: 'error', code: 'TIMEOUT', message: 'La mise √† jour a pris trop de temps');
      } else if (e is SocketException) {
        throw ApiError(status: 'error', code: 'NETWORK_ERROR', message: 'Probl√®me de connexion r√©seau');
      } else if (e is ApiError) {
        rethrow;
      } else {
        throw ApiError(status: 'error', code: 'UNKNOWN_ERROR', message: 'Une erreur inattendue est survenue');
      }
    }
  }
  
  Future<ProductResponse> getAllProducts({
    String? category,
    double? minPrice,
    double? maxPrice,
    String? sortBy,
    String? order,
    int page = 1,
    int limit = 10,
    String status = 'PUBLISHED',
  }) async {
    try {
      print('üõçÔ∏è R√©cup√©ration de tous les produits...');
      
      // Construire les param√®tres de requ√™te
      Map<String, String> queryParams = {
        'page': page.toString(),
        'limit': limit.toString(),
        'status': status,
      };
      
      if (category != null) queryParams['category'] = category;
      if (minPrice != null) queryParams['minPrice'] = minPrice.toString();
      if (maxPrice != null) queryParams['maxPrice'] = maxPrice.toString();
      if (sortBy != null) queryParams['sortBy'] = sortBy;
      if (order != null) queryParams['order'] = order;
      
      final uri = Uri.parse('${ApiConfig.baseUrl}/api/produit').replace(
        queryParameters: queryParams,
      );
      
      print('üåê URL: $uri');

      final response = await http.get(
        uri,
        headers: ApiConfig.defaultHeaders,
      ).timeout(const Duration(seconds: 15));

      print('üì° Status Code: ${response.statusCode}');
      print('üìÑ Response Body (preview): ${response.body.length > 200 ? response.body.substring(0, 200) + "..." : response.body}');
      
      if (response.statusCode == 200) {
        final Map<String, dynamic> data = jsonDecode(response.body);
        print('‚úÖ JSON d√©cod√© avec succ√®s');
        print('üõçÔ∏è Nombre de produits: ${(data['products'] as List).length}');
        
        return ProductResponse.fromJson(data);
      } else {
        print('‚ùå Erreur HTTP: ${response.statusCode}');
        try {
          final errorData = jsonDecode(response.body);
          throw ApiError.fromJson(errorData);
        } catch (e) {
          throw ApiError(
            status: 'error',
            code: 'HTTP_${response.statusCode}',
            message: 'Erreur HTTP ${response.statusCode}',
          );
        }
      }
      
    } on TimeoutException catch (e) {
      print('‚ùå Timeout de connexion: $e');
      throw ApiError(
        status: 'error',
        code: 'TIMEOUT',
        message: 'Le serveur ne r√©pond pas. R√©essayez plus tard.',
      );
    } on SocketException catch (e) {
      print('‚ùå Erreur de socket (pas de r√©seau): $e');
      throw ApiError(
        status: 'error',
        code: 'NO_INTERNET',
        message: 'Pas de connexion r√©seau. V√©rifiez votre connexion.',
      );
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration des produits: $e');
      if (e is ApiError) {
        rethrow;
      }
      throw ApiError(
        status: 'error',
        code: 'NETWORK_ERROR',
        message: 'Erreur de connexion au serveur: $e',
      );
    }
  }

  // R√©cup√©rer un produit par ID avec d√©tails
  Future<Product> getProductById(int productId) async {
    try {
      print('üõçÔ∏è R√©cup√©ration des d√©tails du produit $productId...');
      print('üåê URL: ${ApiConfig.baseUrl}/api/produit/$productId');

      final response = await http.get(
        Uri.parse('${ApiConfig.baseUrl}/api/produit/$productId'),
        headers: ApiConfig.defaultHeaders,
      ).timeout(const Duration(seconds: 10));

      print('üì° Status Code: ${response.statusCode}');
      print('üìÑ Response Body: ${response.body}');

      if (response.statusCode == 200) {
        final Map<String, dynamic> data = jsonDecode(response.body);
        return Product.fromJson(data);
      } else {
        try {
          final errorData = jsonDecode(response.body);
          throw ApiError.fromJson(errorData);
        } catch (e) {
          throw ApiError(
            status: 'error',
            code: 'HTTP_${response.statusCode}',
            message: 'Erreur lors de la r√©cup√©ration des d√©tails',
          );
        }
      }
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration des d√©tails: $e');
      if (e is ApiError) {
        rethrow;
      }
      throw ApiError(
        status: 'error',
        code: 'NETWORK_ERROR',
        message: 'Erreur de connexion au serveur.',
      );
    }
  }

  // Rechercher des produits
  Future<ProductResponse> searchProducts({
    required String query,
    String? category,
    int page = 1,
    int limit = 10,
  }) async {
    try {
      print('üîç Recherche de produits pour: "$query"...');
      
      Map<String, String> queryParams = {
        'query': query,
        'page': page.toString(),
        'limit': limit.toString(),
      };
      
      if (category != null) queryParams['category'] = category;
      
      final uri = Uri.parse('${ApiConfig.baseUrl}/api/produit/search').replace(
        queryParameters: queryParams,
      );

      print('üåê URL: $uri');

      final response = await http.get(
        uri,
        headers: ApiConfig.defaultHeaders,
      ).timeout(const Duration(seconds: 10));

      print('üì° Status Code: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final Map<String, dynamic> data = jsonDecode(response.body);
        print('‚úÖ R√©sultats r√©cup√©r√©s pour "$query"');
        return ProductResponse.fromJson(data);
      } else if (response.statusCode == 404) {
        print('‚ö†Ô∏è Aucun r√©sultat trouv√© pour "$query"');
        return ProductResponse(
          products: [],
          pagination: null,
        );
      } else {
        print('‚ùå Erreur HTTP ${response.statusCode} pour recherche "$query"');
        return ProductResponse(
          products: [],
          pagination: null,
        );
      }
    } catch (e) {
      print('‚ùå Erreur lors de la recherche de produits: $e');
      return ProductResponse(
        products: [],
        pagination: null,
      );
    }
  }

  // R√©cup√©rer les derniers produits
  Future<List<Product>> getLatestProducts({int limit = 10}) async {
    try {
      print('üÜï R√©cup√©ration des derniers produits...');
      print('üåê URL: ${ApiConfig.baseUrl}/api/produit/latest?limit=$limit');

      final response = await http.get(
        Uri.parse('${ApiConfig.baseUrl}/api/produit/latest?limit=$limit'),
        headers: ApiConfig.defaultHeaders,
      ).timeout(const Duration(seconds: 10));

      print('üì° Status Code: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        print('‚úÖ Derniers produits r√©cup√©r√©s');
        return data.map((product) => Product.fromJson(product)).toList();
      } else {
        print('‚ùå Erreur HTTP ${response.statusCode} pour derniers produits');
        return [];
      }
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration des derniers produits: $e');
      return [];
    }
  }

  // R√©cup√©rer les produits en vedette
  Future<List<Product>> getFeaturedProducts({int limit = 10}) async {
    try {
      print('‚≠ê R√©cup√©ration des produits en vedette...');
      print('üåê URL: ${ApiConfig.baseUrl}/api/produit/featured?limit=$limit');

      final response = await http.get(
        Uri.parse('${ApiConfig.baseUrl}/api/produit/featured?limit=$limit'),
        headers: ApiConfig.defaultHeaders,
      ).timeout(const Duration(seconds: 10));

      print('üì° Status Code: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        print('‚úÖ Produits vedettes r√©cup√©r√©s');
        return data.map((product) => Product.fromJson(product)).toList();
      } else {
        print('‚ùå Erreur HTTP ${response.statusCode} pour produits vedettes');
        return [];
      }
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration des produits vedettes: $e');
      return [];
    }
  }

  // R√©cup√©rer les produits par cat√©gorie
  Future<ProductResponse> getProductsByCategory({
    required String category,
    int page = 1,
    int limit = 10,
  }) async {
    try {
      print('üìÇ R√©cup√©ration des produits de la cat√©gorie: $category...');
      print('üåê URL: ${ApiConfig.baseUrl}/api/produit/category/$category?page=$page&limit=$limit');

      final response = await http.get(
        Uri.parse('${ApiConfig.baseUrl}/api/produit/category/$category?page=$page&limit=$limit'),
        headers: ApiConfig.defaultHeaders,
      ).timeout(const Duration(seconds: 10));

      print('üì° Status Code: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final Map<String, dynamic> data = jsonDecode(response.body);
        print('‚úÖ Produits de cat√©gorie r√©cup√©r√©s pour $category');
        return ProductResponse.fromJson(data);
      } else {
        print('‚ùå Erreur HTTP ${response.statusCode} pour cat√©gorie $category');
        return ProductResponse(
          products: [],
          pagination: null,
        );
      }
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration des produits par cat√©gorie: $e');
      return ProductResponse(
        products: [],
        pagination: null,
      );
    }
  }

  // R√©cup√©rer toutes les cat√©gories
  Future<List<String>> getProductCategories() async {
    try {
      print('üìÅ R√©cup√©ration des cat√©gories...');
      print('üåê URL: ${ApiConfig.baseUrl}/api/produit/categories');

      final response = await http.get(
        Uri.parse('${ApiConfig.baseUrl}/api/produit/categories'),
        headers: ApiConfig.defaultHeaders,
      ).timeout(const Duration(seconds: 10));

      print('üì° Status Code: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        print('‚úÖ Cat√©gories r√©cup√©r√©es');
        return data.map((category) => category.toString()).toList();
      } else {
        print('‚ùå Erreur HTTP ${response.statusCode} pour cat√©gories');
        return [];
      }
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration des cat√©gories: $e');
      return [];
    }
  }

  // R√©cup√©rer les produits d'un marchand
  Future<ProductResponse> getMerchantProducts({
    required int merchantId,
    int page = 1,
    int limit = 10,
  }) async {
    try {
      print('üë§ R√©cup√©ration des produits du marchand $merchantId...');
      print('üåê URL: ${ApiConfig.baseUrl}/api/produit/merchant/$merchantId?page=$page&limit=$limit');

      final response = await http.get(
        Uri.parse('${ApiConfig.baseUrl}/api/produit/merchant/$merchantId?page=$page&limit=$limit'),
        headers: ApiConfig.defaultHeaders,
      ).timeout(const Duration(seconds: 10));

      print('üì° Status Code: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final Map<String, dynamic> data = jsonDecode(response.body);
        print('‚úÖ Produits du marchand r√©cup√©r√©s pour $merchantId');
        return ProductResponse.fromJson(data);
      } else {
        print('‚ùå Erreur HTTP ${response.statusCode} pour marchand $merchantId');
        return ProductResponse(
          products: [],
          pagination: null,
        );
      }
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration des produits du marchand: $e');
      return ProductResponse(
        products: [],
        pagination: null,
      );
    }
  }

  // R√©cup√©rer les produits similaires
  Future<List<Product>> getRelatedProducts({
    required int productId,
    int limit = 5,
  }) async {
    try {
      print('üîó R√©cup√©ration des produits similaires pour $productId...');
      print('üåê URL: ${ApiConfig.baseUrl}/api/produit/$productId/related?limit=$limit');

      final response = await http.get(
        Uri.parse('${ApiConfig.baseUrl}/api/produit/$productId/related?limit=$limit'),
        headers: ApiConfig.defaultHeaders,
      ).timeout(const Duration(seconds: 10));

      print('üì° Status Code: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        print('‚úÖ Produits similaires r√©cup√©r√©s pour $productId');
        return data.map((product) => Product.fromJson(product)).toList();
      } else {
        print('‚ùå Erreur HTTP ${response.statusCode} pour produits similaires');
        return [];
      }
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration des produits similaires: $e');
      return [];
    }
  }

  // ========== NOUVELLES M√âTHODES POUR LES COMMER√áANTS ==========

  // üÜï Cr√©er un produit (avec upload d'images et vid√©o)
  Future<CreateProductResponse> createProduct({
    required String name,
    required String description,
    required double price,
    required int stock,
    required String category,
    String? videoUrl,
    File? videoFile,
    List<File>? imageFiles,
    String status = 'DRAFT',
    required String token,
  }) async {
    try {
      print('üõçÔ∏è Cr√©ation d\'un nouveau produit...');
      print('üåê URL: ${ApiConfig.baseUrl}/api/produit');

      var request = http.MultipartRequest(
        'POST',
        Uri.parse('${ApiConfig.baseUrl}/api/produit'),
      );

      // Headers d'authentification
      request.headers.addAll({
        'Authorization': 'Bearer $token',
        'Accept': 'application/json',
      });

      // Champs de texte
      request.fields['name'] = name;
      request.fields['description'] = description;
      request.fields['price'] = price.toString();
      request.fields['stock'] = stock.toString();
      request.fields['category'] = category;
      request.fields['status'] = status;
      if (videoUrl != null) request.fields['videoUrl'] = videoUrl;

      // Ajouter les images
      if (imageFiles != null && imageFiles.isNotEmpty) {
        for (int i = 0; i < imageFiles.length; i++) {
          var multipartFile = await http.MultipartFile.fromPath(
            'productImages',
            imageFiles[i].path,
          );
          request.files.add(multipartFile);
        }
      }

      // Ajouter la vid√©o si pr√©sente
      if (videoFile != null) {
        var multipartFile = await http.MultipartFile.fromPath(
          'video',
          videoFile.path,
        );
        request.files.add(multipartFile);
      }

      print('üì§ Envoi de la requ√™te de cr√©ation...');
      final streamedResponse = await request.send().timeout(const Duration(seconds: 60));
      final response = await http.Response.fromStream(streamedResponse);

      print('üì° Status Code: ${response.statusCode}');
      print('üìÑ Response Body: ${response.body}');

      if (response.statusCode == 201) {
        final Map<String, dynamic> data = jsonDecode(response.body);
        return CreateProductResponse.fromJson(data);
      } else {
        try {
          final errorData = jsonDecode(response.body);
          throw ApiError.fromJson(errorData);
        } catch (e) {
          throw ApiError(
            status: 'error',
            code: 'HTTP_${response.statusCode}',
            message: 'Erreur lors de la cr√©ation du produit',
          );
        }
      }
    } catch (e) {
      print('‚ùå Erreur lors de la cr√©ation du produit: $e');
      if (e is ApiError) {
        rethrow;
      }
      throw ApiError(
        status: 'error',
        code: 'NETWORK_ERROR',
        message: 'Erreur de connexion au serveur.',
      );
    }
  }

  // üÜï Mettre √† jour un produit
  Future<UpdateProductResponse> updateProduct({
    required int productId,
    String? name,
    String? description,
    double? price,
    int? stock,
    String? category,
    String? videoUrl,
    File? videoFile,
    List<File>? imageFiles,
    required String token,
  }) async {
    try {
      print('üõçÔ∏è Mise √† jour du produit $productId...');
      print('üåê URL: ${ApiConfig.baseUrl}/api/produit/$productId');

      var request = http.MultipartRequest(
        'PUT',
        Uri.parse('${ApiConfig.baseUrl}/api/produit/$productId'),
      );

      // Headers d'authentification
      request.headers.addAll({
        'Authorization': 'Bearer $token',
        'Accept': 'application/json',
      });

      // Champs de texte (seulement ceux qui sont fournis)
      if (name != null) request.fields['name'] = name;
      if (description != null) request.fields['description'] = description;
      if (price != null) request.fields['price'] = price.toString();
      if (stock != null) request.fields['stock'] = stock.toString();
      if (category != null) request.fields['category'] = category;
      if (videoUrl != null) request.fields['videoUrl'] = videoUrl;

      // Ajouter les images si pr√©sentes
      if (imageFiles != null && imageFiles.isNotEmpty) {
        for (int i = 0; i < imageFiles.length; i++) {
          var multipartFile = await http.MultipartFile.fromPath(
            'productImages',
            imageFiles[i].path,
          );
          request.files.add(multipartFile);
        }
      }

      // Ajouter la vid√©o si pr√©sente
      if (videoFile != null) {
        var multipartFile = await http.MultipartFile.fromPath(
          'video',
          videoFile.path,
        );
        request.files.add(multipartFile);
      }

      print('üì§ Envoi de la mise √† jour...');
      final streamedResponse = await request.send().timeout(const Duration(seconds: 60));
      final response = await http.Response.fromStream(streamedResponse);

      print('üì° Status Code: ${response.statusCode}');
      print('üìÑ Response Body: ${response.body}');

      if (response.statusCode == 200) {
        final Map<String, dynamic> data = jsonDecode(response.body);
        return UpdateProductResponse.fromJson(data);
      } else {
        try {
          final errorData = jsonDecode(response.body);
          throw ApiError.fromJson(errorData);
        } catch (e) {
          throw ApiError(
            status: 'error',
            code: 'HTTP_${response.statusCode}',
            message: 'Erreur lors de la mise √† jour du produit',
          );
        }
      }
    } catch (e) {
      print('‚ùå Erreur lors de la mise √† jour du produit: $e');
      if (e is ApiError) {
        rethrow;
      }
      throw ApiError(
        status: 'error',
        code: 'NETWORK_ERROR',
        message: 'Erreur de connexion au serveur.',
      );
    }
  }

  // üÜï Mettre √† jour le stock d'un produit
  Future<UpdateStockResponse> updateProductStock({
    required int productId,
    required int stock,
    required String token,
  }) async {
    try {
      print('üì¶ Mise √† jour du stock du produit $productId...');
      print('üåê URL: ${ApiConfig.baseUrl}/api/produit/$productId/stock');

      final response = await http.patch(
        Uri.parse('${ApiConfig.baseUrl}/api/produit/$productId/stock'),
        headers: {
          ...ApiConfig.defaultHeaders,
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          'stock': stock,
        }),
      ).timeout(const Duration(seconds: 10));

      print('üì° Status Code: ${response.statusCode}');
      print('üìÑ Response Body: ${response.body}');

      if (response.statusCode == 200) {
        final Map<String, dynamic> data = jsonDecode(response.body);
        return UpdateStockResponse.fromJson(data);
      } else {
        try {
          final errorData = jsonDecode(response.body);
          throw ApiError.fromJson(errorData);
        } catch (e) {
          throw ApiError(
            status: 'error',
            code: 'HTTP_${response.statusCode}',
            message: 'Erreur lors de la mise √† jour du stock',
          );
        }
      }
    } catch (e) {
      print('‚ùå Erreur lors de la mise √† jour du stock: $e');
      if (e is ApiError) {
        rethrow;
      }
      throw ApiError(
        status: 'error',
        code: 'NETWORK_ERROR',
        message: 'Erreur de connexion au serveur.',
      );
    }
  }

  // üÜï Supprimer un produit
  Future<DeleteProductResponse> deleteProduct({
    required int productId,
    required String token,
  }) async {
    try {
      print('üóëÔ∏è Suppression du produit $productId...');
      print('üåê URL: ${ApiConfig.baseUrl}/api/produit/$productId');

      final response = await http.delete(
        Uri.parse('${ApiConfig.baseUrl}/api/produit/$productId'),
        headers: {
          ...ApiConfig.defaultHeaders,
          'Authorization': 'Bearer $token',
        },
      ).timeout(const Duration(seconds: 15));

      print('üì° Status Code: ${response.statusCode}');
      print('üìÑ Response Body: ${response.body}');

      if (response.statusCode == 200) {
        final Map<String, dynamic> data = jsonDecode(response.body);
        return DeleteProductResponse.fromJson(data);
      } else {
        try {
          final errorData = jsonDecode(response.body);
          throw ApiError.fromJson(errorData);
        } catch (e) {
          throw ApiError(
            status: 'error',
            code: 'HTTP_${response.statusCode}',
            message: 'Erreur lors de la suppression du produit',
          );
        }
      }
    } catch (e) {
      print('‚ùå Erreur lors de la suppression du produit: $e');
      if (e is ApiError) {
        rethrow;
      }
      throw ApiError(
        status: 'error',
        code: 'NETWORK_ERROR',
        message: 'Erreur de connexion au serveur.',
      );
    }
  }

  // üÜï R√©cup√©rer les statistiques du commer√ßant
  Future<ProductStatsResponse> getProductStats(String token) async {
    try {
      print('üìä R√©cup√©ration des statistiques produits...');
      print('üåê URL: ${ApiConfig.baseUrl}/api/produit/stats');

      final response = await http.get(
        Uri.parse('${ApiConfig.baseUrl}/api/produit/stats'),
        headers: {
          ...ApiConfig.defaultHeaders,
          'Authorization': 'Bearer $token',
        },
      ).timeout(const Duration(seconds: 10));

      print('üì° Status Code: ${response.statusCode}');
      print('üìÑ Response Body: ${response.body}');

      if (response.statusCode == 200) {
        final Map<String, dynamic> data = jsonDecode(response.body);
        return ProductStatsResponse.fromJson(data);
      } else {
        try {
          final errorData = jsonDecode(response.body);
          throw ApiError.fromJson(errorData);
        } catch (e) {
          throw ApiError(
            status: 'error',
            code: 'HTTP_${response.statusCode}',
            message: 'Erreur lors de la r√©cup√©ration des statistiques',
          );
        }
      }
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration des statistiques: $e');
      if (e is ApiError) {
        rethrow;
      }
      throw ApiError(
        status: 'error',
        code: 'NETWORK_ERROR',
        message: 'Erreur de connexion au serveur.',
      );
    }
  }

  // üÜï Changer le statut d'un produit (DRAFT/PUBLISHED)
  Future<UpdateStatusResponse> updateProductStatus({
    required int productId,
    required String status, // 'DRAFT' ou 'PUBLISHED'
    required String token,
  }) async {
    try {
      print('üìù Changement de statut du produit $productId vers $status...');
      print('üåê URL: ${ApiConfig.baseUrl}/api/produit/$productId/status');

      final response = await http.patch(
        Uri.parse('${ApiConfig.baseUrl}/api/produit/$productId/status'),
        headers: {
          ...ApiConfig.defaultHeaders,
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          'status': status,
        }),
      ).timeout(const Duration(seconds: 10));

      print('üì° Status Code: ${response.statusCode}');
      print('üìÑ Response Body: ${response.body}');

      if (response.statusCode == 200) {
        final Map<String, dynamic> data = jsonDecode(response.body);
        return UpdateStatusResponse.fromJson(data);
      } else {
        try {
          final errorData = jsonDecode(response.body);
          throw ApiError.fromJson(errorData);
        } catch (e) {
          throw ApiError(
            status: 'error',
            code: 'HTTP_${response.statusCode}',
            message: 'Erreur lors du changement de statut',
          );
        }
      }
    } catch (e) {
      print('‚ùå Erreur lors du changement de statut: $e');
      if (e is ApiError) {
        rethrow;
      }
      throw ApiError(
        status: 'error',
        code: 'NETWORK_ERROR',
        message: 'Erreur de connexion au serveur.',
      );
    }
  }

  // ========== M√âTHODES UTILITAIRES ==========

  // Tester la connexion
  Future<bool> testConnection() async {
    try {
      print('üß™ Test de connexion...');
      print('üåê URL de test: ${ApiConfig.baseUrl}/api/produit');
      
      final response = await http.get(
        Uri.parse('${ApiConfig.baseUrl}/api/produit'),
        headers: ApiConfig.defaultHeaders,
      ).timeout(const Duration(seconds: 5));
      
      print('üì° Test Status: ${response.statusCode}');
      
      bool isConnected = response.statusCode == 200;
      print(isConnected ? '‚úÖ Connexion r√©ussie!' : '‚ùå Connexion √©chou√©e');
      
      return isConnected;
    } catch (e) {
      print('‚ùå Test de connexion √©chou√©: $e');
      return false;
    }
  }
}

// ========== NOUVELLES CLASSES DE R√âPONSE ==========

class CreateProductResponse {
  final String status;
  final String message;
  final Product product;

  CreateProductResponse({
    required this.status,
    required this.message,
    required this.product,
  });

  factory CreateProductResponse.fromJson(Map<String, dynamic> json) {
    return CreateProductResponse(
      status: json['status'] as String,
      message: json['message'] as String,
      product: Product.fromJson(json['product']),
    );
  }

  bool get success => status == 'success';
}

class UpdateProductResponse {
  final String message;
  final Product product;

  UpdateProductResponse({
    required this.message,
    required this.product,
  });

  factory UpdateProductResponse.fromJson(Map<String, dynamic> json) {
    return UpdateProductResponse(
      message: json['message'] as String,
      product: Product.fromJson(json['product']),
    );
  }
}

class UpdateStockResponse {
  final String message;
  final Product product;

  UpdateStockResponse({
    required this.message,
    required this.product,
  });

  factory UpdateStockResponse.fromJson(Map<String, dynamic> json) {
    return UpdateStockResponse(
      message: json['message'] as String,
      product: Product.fromJson(json['product']),
    );
  }
}

class DeleteProductResponse {
  final String message;

  DeleteProductResponse({required this.message});

  factory DeleteProductResponse.fromJson(Map<String, dynamic> json) {
    return DeleteProductResponse(
      message: json['message'] as String,
    );
  }
}

class UpdateStatusResponse {
  final String message;
  final Product product;

  UpdateStatusResponse({
    required this.message,
    required this.product,
  });

  factory UpdateStatusResponse.fromJson(Map<String, dynamic> json) {
    return UpdateStatusResponse(
      message: json['message'] as String,
      product: Product.fromJson(json['product']),
    );
  }
}

class ProductStatsResponse {
  final int totalProducts;
  final int lowStockCount;
  final List<CategoryStat> categoryStats;

  ProductStatsResponse({
    required this.totalProducts,
    required this.lowStockCount,
    required this.categoryStats,
  });

  factory ProductStatsResponse.fromJson(Map<String, dynamic> json) {
    return ProductStatsResponse(
      totalProducts: json['totalProducts'] as int,
      lowStockCount: json['lowStockCount'] as int,
      categoryStats: (json['categoryStats'] as List<dynamic>)
          .map((stat) => CategoryStat.fromJson(stat))
          .toList(),
    );
  }
}

class CategoryStat {
  final String category;
  final int count;

  CategoryStat({
    required this.category,
    required this.count,
  });

  factory CategoryStat.fromJson(Map<String, dynamic> json) {
    return CategoryStat(
      category: json['category'] as String,
      count: json['count'] as int,
    );
  }
}

// Classe d'erreur API
class ApiError implements Exception {
  final String status;
  final String code;
  final String message;
  final Map<String, dynamic>? errors;

  ApiError({
    required this.status,
    required this.code,
    required this.message,
    this.errors,
  });

  factory ApiError.fromJson(Map<String, dynamic> json) {
    return ApiError(
      status: json['status'] as String? ?? 'error',
      code: json['code'] as String? ?? 'UNKNOWN_ERROR',
      message: json['message'] as String? ?? 'Une erreur est survenue',
      errors: json['errors'] as Map<String, dynamic>?,
    );
  }

  @override
  String toString() {
    return 'ApiError(status: $status, code: $code, message: $message)';
  }
}